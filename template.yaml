AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for Private GPT FE

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - dev
      - test
      - prod
    Default: dev
  LogLevel:
    Type: String
    AllowedValues:
      - ERROR
      - WARN
      - INFO
      - DEBUG
    Default: INFO
  LogRetentionInDays:
    Description: Specifies the number of days you want to retain logs.
    Type: Number
    Default: '7'
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653

Resources:

  ####################################################
  # Frontend Layer
  ####################################################

  WebsiteBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  CDNOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Ref WebsiteBucket
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - Id: !GetAtt WebsiteBucket.RegionalDomainName
          DomainName: !GetAtt WebsiteBucket.RegionalDomainName
          S3OriginConfig:
            OriginAccessIdentity: ''
          OriginAccessControlId: !GetAtt CDNOriginAccessControl.Id
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          TargetOriginId: !GetAtt WebsiteBucket.RegionalDomainName
          Compress: true
          ViewerProtocolPolicy: redirect-to-https
        HttpVersion: http2
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        IPV6Enabled: true
        PriceClass: PriceClass_100

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
        - Sid: AllowCloudFrontServicePrincipalReadOnly
          Action: s3:GetObject
          Effect: Allow
          Resource: !Sub arn:aws:s3:::${WebsiteBucket}/*
          Principal:
            Service: cloudfront.amazonaws.com
          Condition:
            StringEquals:
              'AWS:SourceArn': !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CDN.Id}
        - Sid: AllowSSLRequestsOnly
          Effect: Deny
          Principal: '*'
          Action: s3:*
          Resource:
          - !GetAtt WebsiteBucket.Arn
          - !Sub ${WebsiteBucket.Arn}/*
          Condition:
            Bool:
              'aws:SecureTransport': false

  ####################################################
  # Auth Layer
  ####################################################

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref AWS::StackName
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 10
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      MfaConfiguration: OPTIONAL
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
          - email

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Ref AWS::StackName
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        - profile
        - email
      AllowedOAuthFlowsUserPoolClient: true
      PreventUserExistenceErrors: ENABLED
      EnableTokenRevocation: true
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - http://localhost:5173
        - https://oauth.pstmn.io/v1/callback
        - !Sub https://${CDN.DomainName}
      LogoutURLs:
        - http://localhost:5173
        - !Sub https://${CDN.DomainName}
      GenerateSecret: false
      AccessTokenValidity: 10
      IdTokenValidity: 10
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days

  UserAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 
              - sts:AssumeRoleWithWebIdentity
              - sts:TagSession
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: UserAuthenticatedRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: GenAI
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - "arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-haiku-20240307-v1:0"
                  - "arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0"

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
          ServerSideTokenCheck: true
  
  PrincipalTags:
    Type: AWS::Cognito::IdentityPoolPrincipalTag
    Properties:
      IdentityPoolId: !Ref IdentityPool
      IdentityProviderName: !GetAtt UserPool.ProviderName
      PrincipalTags:                 
        client: "aud"
        username: "sub"

  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt UserAuthenticatedRole.Arn

Outputs:
  CDNUrl:
    Description: CDN URL
    Value: !Sub ${CDN.DomainName}
  AuthUrl:
    Description: Auth URL
    Value: !Sub ${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com
  UserPoolId:
    Description: User Pool ID
    Value: !Ref UserPool
  IdentityPoolId:
    Description: Identity Pool ID
    Value: !Ref IdentityPool
  AppClient:
    Description: App Client
    Value: !Ref UserPoolClient
  AuthenticatedRole:
    Description: Authenticated Role
    Value: !GetAtt UserAuthenticatedRole.Arn
